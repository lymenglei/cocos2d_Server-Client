// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: menglei/protos.proto
package protoGen.menglei;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import okio.ByteString;

public final class role_pay_res extends Message<role_pay_res, role_pay_res.Builder> {
  public static final ProtoAdapter<role_pay_res> ADAPTER = ProtoAdapter.newMessageAdapter(role_pay_res.class);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_OK = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer ok;

  public role_pay_res(Integer ok) {
    this(ok, ByteString.EMPTY);
  }

  public role_pay_res(Integer ok, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ok = ok;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ok = ok;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof role_pay_res)) return false;
    role_pay_res o = (role_pay_res) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(ok, o.ok);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ok != null ? ok.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<role_pay_res, Builder> {
    public Integer ok;

    public Builder() {
    }

    public Builder ok(Integer ok) {
      this.ok = ok;
      return this;
    }

    @Override
    public role_pay_res build() {
      return new role_pay_res(ok, super.buildUnknownFields());
    }
  }
}
